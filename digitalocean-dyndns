#!/usr/bin/env python
# -*- coding: UTF-8 -*-

"""
Digital Ocean DynDNS

Dynamic DNS updater for Digital Ocean API v2

Copyright (c) 2014 Frédéric Massart - FMCorz.net
Copyright (c) 2020 Sebastian Wallat - Ruhr-University Bochum, Germany

Licensed under The MIT License
Redistributions of files must retain the above copyright notice.

http://github.com/FMCorz/digitalocean-dyndns
"""

import sys
import requests
import argparse
import logging
import os

DIGITALOCEAN_TOKEN = os.environ["DIGITALOCEAN_TOKEN"]
API = 'https://api.digitalocean.com/v2'

# Error codes
DOMAIN_NOT_FOUND = 1
RECORD_NOT_FOUND = 2
REQUEST_ERROR = 4
IP_FETCH_FAILED = 8


def get_ip4():
    """Return the external IPv4"""
    r = requests.get('https://api.ipify.org')
    if r.status_code != 200:
        logging.error('Could not obtain IPv4 from external resource')
        sys.exit(IP_FETCH_FAILED)
    return r.text

def get_ip6():
    """Return the external IPv4"""
    r = requests.get('https://api6.ipify.org')
    if r.status_code != 200:
        logging.error('Could not obtain IPv6 from external resource')
        sys.exit(IP_FETCH_FAILED)
    return r.text

def request(uri, params={}, method='GET'):
    """Perform a request on Digital Ocean API"""
    url = API + '/' + uri.strip('/')

    headers = {
        'Authorization': 'Bearer {0}'.format(DIGITALOCEAN_TOKEN)
    }

    logging.debug('Requesting: {} ({})'.format(url, method))
    if method == 'POST':
        r = requests.post(url, headers=headers, data=params)
    elif method == 'PUT':
        r = requests.put(url, headers=headers, data=params)
    else:
        r = requests.get(url, params=params, headers=headers)

    if r.status_code < 200 or r.status_code >= 300:
        logging.error(u'Host replied with a non-OK status. Error: {}'.format(r.status_code))
        sys.exit(REQUEST_ERROR)

    return r.json()

# Define arguments
parser = argparse.ArgumentParser(description='Dynamic DNS updater for Digital Ocean')
parser.add_argument('--domain', '-d', help='Base Domain name', required=True)
parser.add_argument('--record', '-r', help='Record for domain, e.g. @, *, or subdomain', required=True)
parser.add_argument('--allownew', '-c', help='Allow creation of a new record', action='store_true')
parser.add_argument('--verbose', '-v', help='Increase verbosity', action='count', default=0)
args = parser.parse_args()

# Verbosity level
if args.verbose >= 2:
    debug = logging.DEBUG
elif args.verbose == 1:
    debug = logging.INFO
else:
    debug = logging.WARNING

logging.basicConfig(format='%(message)s', level=debug)

# Looking up the records
recordIds = {'A': None, 'AAAA': None}
records = request('/domains/{0}/records'.format(args.domain))
for record in records.get('domain_records'):
    if record.get('type') in recordIds.keys() and record.get('name') == args.record:
        recordIds[record.get('type')] = record.get('id')
        logging.info('Found record {}, ID: {}'.format(args.record, recordIds[record.get('type')]))
        print(record)

# Create the record if it does not exist
for type, id in recordIds.items():
    if type == "A":
        ip = get_ip4()
        if "." not in ip:
            logging.warning("Found no public IPv4, skipping update IPv4 entry")
            continue
    else:
        ip = get_ip6()
        if ":" not in ip:
            logging.warning("Found no public IPv6, skipping update IPv6 entry")
            continue

    if not id:
        if not args.allownew:
            logging.warning('Could not find the A record {} for domain {}'.format(args.record, args.domain))
            sys.exit(RECORD_NOT_FOUND)

        params = {
            'type': type,
            'name': args.record,
            'data': ip
        }
        result = request('/domains/{0}/records'.format(args.domain), params=params, method='POST')
        logging.info('Record created with ID {} using IP {}'.format(result.get('domain_record', {}).get('id', '<?>'), ip))

    # Update the existing record
    else:
        if record.get('data') == ip:
            logging.info('No update required')

        else:
            params = {
                'type': type,
                'name': args.record,
                'data': ip
            }
            result = request('/domains/{0}/records/{1}'.format(args.domain, id), params=params, method="PUT")
            logging.info('Updated record with IP {}'.format(ip))

